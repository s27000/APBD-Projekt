// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Projekt.Context;

#nullable disable

namespace Projekt.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240626180610_ProductContractUpdate3.0")]
    partial class ProductContractUpdate30
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Projekt.Models.Domain.Client", b =>
                {
                    b.Property<int>("IdClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdClient");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClient"));

                    b.Property<string>("ClientType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClientType");

                    b.Property<bool>("Depreciated")
                        .HasColumnType("bit")
                        .HasColumnName("Depreciated");

                    b.HasKey("IdClient");

                    b.ToTable("client", (string)null);
                });

            modelBuilder.Entity("Projekt.Models.Domain.Discount", b =>
                {
                    b.Property<int>("IdDiscount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdDiscount");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDiscount"));

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateFrom");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateTo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("Value")
                        .HasColumnType("int")
                        .HasColumnName("Value");

                    b.HasKey("IdDiscount");

                    b.ToTable("discount", (string)null);
                });

            modelBuilder.Entity("Projekt.Models.Domain.Firm", b =>
                {
                    b.Property<int>("IdClient")
                        .HasColumnType("int")
                        .HasColumnName("IdClient");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("KRS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("KRS");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhoneNumber");

                    b.HasKey("IdClient");

                    b.ToTable("firm", (string)null);
                });

            modelBuilder.Entity("Projekt.Models.Domain.Person", b =>
                {
                    b.Property<int>("IdClient")
                        .HasColumnType("int")
                        .HasColumnName("IdClient");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Address");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("PESEL")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PESEL");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Surname");

                    b.HasKey("IdClient");

                    b.ToTable("person", (string)null);
                });

            modelBuilder.Entity("Projekt.Models.Domain.Product", b =>
                {
                    b.Property<int>("IdProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdProduct");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProduct"));

                    b.Property<decimal>("AnnualPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("AnnualPrice");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("ProductCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ProductCategory");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Version");

                    b.HasKey("IdProduct");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("Projekt.Models.Domain.ProductContract", b =>
                {
                    b.Property<int>("IdContract")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdContract");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdContract"));

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateFrom");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateTo");

                    b.Property<int>("IdClient")
                        .HasColumnType("int")
                        .HasColumnName("IdClient");

                    b.Property<int?>("IdDiscount")
                        .HasColumnType("int")
                        .HasColumnName("IdDiscount");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int")
                        .HasColumnName("IdProduct");

                    b.Property<string>("ProductUpdateDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ProductUpdateDescription");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ProductVersion");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("TotalPrice");

                    b.Property<int>("UpdateSupportDuration")
                        .HasColumnType("int")
                        .HasColumnName("UpdateSupportExtension");

                    b.Property<int?>("Value")
                        .HasColumnType("int")
                        .HasColumnName("Value");

                    b.HasKey("IdContract");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdDiscount");

                    b.HasIndex("IdProduct");

                    b.ToTable("productContract", (string)null);
                });

            modelBuilder.Entity("Projekt.Models.Domain.User", b =>
                {
                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Role");

                    b.HasKey("Login");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Projekt.Models.Domain.Firm", b =>
                {
                    b.HasOne("Projekt.Models.Domain.Client", "Client")
                        .WithOne("Firm")
                        .HasForeignKey("Projekt.Models.Domain.Firm", "IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Projekt.Models.Domain.Person", b =>
                {
                    b.HasOne("Projekt.Models.Domain.Client", "Client")
                        .WithOne("Person")
                        .HasForeignKey("Projekt.Models.Domain.Person", "IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Projekt.Models.Domain.ProductContract", b =>
                {
                    b.HasOne("Projekt.Models.Domain.Client", "Client")
                        .WithMany("ProductContracts")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projekt.Models.Domain.Discount", "Discount")
                        .WithMany("ProductContracts")
                        .HasForeignKey("IdDiscount");

                    b.HasOne("Projekt.Models.Domain.Product", "Product")
                        .WithMany("ProductContracts")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Discount");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Projekt.Models.Domain.Client", b =>
                {
                    b.Navigation("Firm")
                        .IsRequired();

                    b.Navigation("Person")
                        .IsRequired();

                    b.Navigation("ProductContracts");
                });

            modelBuilder.Entity("Projekt.Models.Domain.Discount", b =>
                {
                    b.Navigation("ProductContracts");
                });

            modelBuilder.Entity("Projekt.Models.Domain.Product", b =>
                {
                    b.Navigation("ProductContracts");
                });
#pragma warning restore 612, 618
        }
    }
}
